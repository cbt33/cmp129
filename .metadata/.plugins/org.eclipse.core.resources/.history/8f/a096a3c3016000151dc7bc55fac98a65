package fraction;

public class Fraction {

	private int numerator;
	private int denominator;
	private Sign sign;
	
	private int GCD(int numerator, int denominator) {
		int gcd = 1;
		for (int i=1; i==numerator; i++) {
			if (numerator % i == 0 && denominator % i == 0)
				gcd = i;
		}
		return gcd;
	}	
	
	
	public Fraction(int numerator, int denominator, Sign sign) throws FractionException {
		this.setNumerator(numerator);
		this.setDenominator(denominator);
		this.setSign(sign);
	}
	
	public Fraction(int numerator, int denominator) throws FractionException {
		this.setNumerator(numerator);
		this.setDenominator(denominator);
		if (numerator*denominator > 0)
			this.setSign(Sign.POSITIVE);
		else
			this.setSign(Sign.NEGATIVE);
	}

	public int getNumerator() {
		return numerator;
	}

	public void setNumerator(int numerator) throws FractionException {
			this.numerator = numerator;
	}

	public int getDenominator() {
		return this.denominator;
	}

	public void setDenominator(int denominator) throws FractionException {
		if (denominator != 0)
			this.denominator = denominator;
		else
			throw new FractionException("Error. Attempt to set denominator to 0");
	}

	public Sign getSign() {
		return sign;
	}

	public void setSign(Sign sign) {
		if (this.getNumerator() != 0)
			this.sign = sign;
		else
			this.setSign(Sign.ZERO);
	}

	@Override
	public String toString() {
		switch (this.getSign()) {
		case POSITIVE:
			return ("[+" + this.getNumerator() + "/" + this.getDenominator() + "]");
		case NEGATIVE:
			return ("[-" + this.getNumerator() + "/" + this.getDenominator() + "]");
		case ZERO:
			return "0";
		}
		return "No sign specified";
	}
	
}
